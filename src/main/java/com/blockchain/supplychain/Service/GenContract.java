package com.blockchain.supplychain.Service;


import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.5.0.
 */
@SuppressWarnings("rawtypes")
public class GenContract extends Contract {
    public static final String BINARY = "60806040526000805534801561001457600080fd5b50612224806100246000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80636d072c2a1161005b5780636d072c2a146100ee5780637acc0b201461011e578063d7dbb89814610154578063f5e2c8a3146101845761007d565b8063235fe042146100825780633e1a9300146100a05780636813b53b146100be575b600080fd5b61008a6101b4565b6040516100979190611629565b60405180910390f35b6100a86101ba565b6040516100b59190611629565b60405180910390f35b6100d860048036038101906100d39190611684565b6101c3565b6040516100e59190611808565b60405180910390f35b610108600480360381019061010391906119f3565b6104ed565b6040516101159190611629565b60405180910390f35b61013860048036038101906101339190611684565b610af1565b60405161014b9796959493929190611b93565b60405180910390f35b61016e60048036038101906101699190611c25565b610deb565b60405161017b9190611629565b60405180910390f35b61019e60048036038101906101999190611c25565b6111f1565b6040516101ab9190611dcc565b60405180910390f35b60005481565b60008054905090565b6101cb6115d3565b600282815481106101df576101de611dee565b5b90600052602060002090600702016040518060e001604052908160008201805461020890611e4c565b80601f016020809104026020016040519081016040528092919081815260200182805461023490611e4c565b80156102815780601f1061025657610100808354040283529160200191610281565b820191906000526020600020905b81548152906001019060200180831161026457829003601f168201915b5050505050815260200160018201805461029a90611e4c565b80601f01602080910402602001604051908101604052809291908181526020018280546102c690611e4c565b80156103135780601f106102e857610100808354040283529160200191610313565b820191906000526020600020905b8154815290600101906020018083116102f657829003601f168201915b5050505050815260200160028201805461032c90611e4c565b80601f016020809104026020016040519081016040528092919081815260200182805461035890611e4c565b80156103a55780601f1061037a576101008083540402835291602001916103a5565b820191906000526020600020905b81548152906001019060200180831161038857829003601f168201915b505050505081526020016003820180546103be90611e4c565b80601f01602080910402602001604051908101604052809291908181526020018280546103ea90611e4c565b80156104375780601f1061040c57610100808354040283529160200191610437565b820191906000526020600020905b81548152906001019060200180831161041a57829003601f168201915b5050505050815260200160048201805461045090611e4c565b80601f016020809104026020016040519081016040528092919081815260200182805461047c90611e4c565b80156104c95780601f1061049e576101008083540402835291602001916104c9565b820191906000526020600020905b8154815290600101906020018083116104ac57829003601f168201915b50505050508152602001600582015481526020016006820154815250509050919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84036107225761051e6115d3565b8a8160000181905250898160200181905250888160400181905250878160600181905250858160800181905250868160c00181815250506000548160a001818152505060008081548092919061057390611eac565b9190505550600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081908060018154018082558091505060019003906000526020600020906007020160009091909190915060008201518160000190816105f691906120a0565b50602082015181600101908161060c91906120a0565b50604082015181600201908161062291906120a0565b50606082015181600301908161063891906120a0565b50608082015181600401908161064e91906120a0565b5060a0820151816005015560c082015181600601555050600281908060018154018082558091505060019003906000526020600020906007020160009091909190915060008201518160000190816106a691906120a0565b5060208201518160010190816106bc91906120a0565b5060408201518160020190816106d291906120a0565b5060608201518160030190816106e891906120a0565b5060808201518160040190816106fe91906120a0565b5060a0820151816005015560c0820151816006015550508060a00151915050610ae4565b60005b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490508110156107f35784600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106107c1576107c0611dee565b5b906000526020600020906007020160050154036107e0578094506107f3565b80806107eb90612172565b915050610725565b5085600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020858154811061084657610845611dee565b5b906000526020600020906007020160060154101561086357600080fd5b61086b6115d3565b8a8160000181905250898160200181905250888160400181905250878160600181905250858160800181905250868160c00181815250506000548160a00181815250506000808154809291906108c090611eac565b91905055506002819080600181540180825580915050600190039060005260206000209060070201600090919091909150600082015181600001908161090691906120a0565b50602082015181600101908161091c91906120a0565b50604082015181600201908161093291906120a0565b50606082015181600301908161094891906120a0565b50608082015181600401908161095e91906120a0565b5060a0820151816005015560c08201518160060155505086600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002086815481106109c7576109c6611dee565b5b906000526020600020906007020160060160008282546109e791906121ba565b92505081905550600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190806001815401808255809150506001900390600052602060002090600702016000909190919091506000820151816000019081610a6c91906120a0565b506020820151816001019081610a8291906120a0565b506040820151816002019081610a9891906120a0565b506060820151816003019081610aae91906120a0565b506080820151816004019081610ac491906120a0565b5060a0820151816005015560c0820151816006015550508060a001519150505b9998505050505050505050565b60028181548110610b0157600080fd5b9060005260206000209060070201600091509050806000018054610b2490611e4c565b80601f0160208091040260200160405190810160405280929190818152602001828054610b5090611e4c565b8015610b9d5780601f10610b7257610100808354040283529160200191610b9d565b820191906000526020600020905b815481529060010190602001808311610b8057829003601f168201915b505050505090806001018054610bb290611e4c565b80601f0160208091040260200160405190810160405280929190818152602001828054610bde90611e4c565b8015610c2b5780601f10610c0057610100808354040283529160200191610c2b565b820191906000526020600020905b815481529060010190602001808311610c0e57829003601f168201915b505050505090806002018054610c4090611e4c565b80601f0160208091040260200160405190810160405280929190818152602001828054610c6c90611e4c565b8015610cb95780601f10610c8e57610100808354040283529160200191610cb9565b820191906000526020600020905b815481529060010190602001808311610c9c57829003601f168201915b505050505090806003018054610cce90611e4c565b80601f0160208091040260200160405190810160405280929190818152602001828054610cfa90611e4c565b8015610d475780601f10610d1c57610100808354040283529160200191610d47565b820191906000526020600020905b815481529060010190602001808311610d2a57829003601f168201915b505050505090806004018054610d5c90611e4c565b80601f0160208091040260200160405190810160405280929190818152602001828054610d8890611e4c565b8015610dd55780601f10610daa57610100808354040283529160200191610dd5565b820191906000526020600020905b815481529060010190602001808311610db857829003601f168201915b5050505050908060050154908060060154905087565b600080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561116d57838290600052602060002090600702016040518060e0016040529081600082018054610e8090611e4c565b80601f0160208091040260200160405190810160405280929190818152602001828054610eac90611e4c565b8015610ef95780601f10610ece57610100808354040283529160200191610ef9565b820191906000526020600020905b815481529060010190602001808311610edc57829003601f168201915b50505050508152602001600182018054610f1290611e4c565b80601f0160208091040260200160405190810160405280929190818152602001828054610f3e90611e4c565b8015610f8b5780601f10610f6057610100808354040283529160200191610f8b565b820191906000526020600020905b815481529060010190602001808311610f6e57829003601f168201915b50505050508152602001600282018054610fa490611e4c565b80601f0160208091040260200160405190810160405280929190818152602001828054610fd090611e4c565b801561101d5780601f10610ff25761010080835404028352916020019161101d565b820191906000526020600020905b81548152906001019060200180831161100057829003601f168201915b5050505050815260200160038201805461103690611e4c565b80601f016020809104026020016040519081016040528092919081815260200182805461106290611e4c565b80156110af5780601f10611084576101008083540402835291602001916110af565b820191906000526020600020905b81548152906001019060200180831161109257829003601f168201915b505050505081526020016004820180546110c890611e4c565b80601f01602080910402602001604051908101604052809291908181526020018280546110f490611e4c565b80156111415780601f1061111657610100808354040283529160200191611141565b820191906000526020600020905b81548152906001019060200180831161112457829003601f168201915b505050505081526020016005820154815260200160068201548152505081526020019060010190610e4d565b5050505090506000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600183516111c291906121ba565b815481106111d3576111d2611dee565b5b90600052602060002090600702016005015490508092505050919050565b60606000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050146115c757600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156115bc57838290600052602060002090600702016040518060e00160405290816000820180546112cf90611e4c565b80601f01602080910402602001604051908101604052809291908181526020018280546112fb90611e4c565b80156113485780601f1061131d57610100808354040283529160200191611348565b820191906000526020600020905b81548152906001019060200180831161132b57829003601f168201915b5050505050815260200160018201805461136190611e4c565b80601f016020809104026020016040519081016040528092919081815260200182805461138d90611e4c565b80156113da5780601f106113af576101008083540402835291602001916113da565b820191906000526020600020905b8154815290600101906020018083116113bd57829003601f168201915b505050505081526020016002820180546113f390611e4c565b80601f016020809104026020016040519081016040528092919081815260200182805461141f90611e4c565b801561146c5780601f106114415761010080835404028352916020019161146c565b820191906000526020600020905b81548152906001019060200180831161144f57829003601f168201915b5050505050815260200160038201805461148590611e4c565b80601f01602080910402602001604051908101604052809291908181526020018280546114b190611e4c565b80156114fe5780601f106114d3576101008083540402835291602001916114fe565b820191906000526020600020905b8154815290600101906020018083116114e157829003601f168201915b5050505050815260200160048201805461151790611e4c565b80601f016020809104026020016040519081016040528092919081815260200182805461154390611e4c565b80156115905780601f1061156557610100808354040283529160200191611590565b820191906000526020600020905b81548152906001019060200180831161157357829003601f168201915b50505050508152602001600582015481526020016006820154815250508152602001906001019061129c565b5050505090506115ce565b6060809150505b919050565b6040518060e00160405280606081526020016060815260200160608152602001606081526020016060815260200160008152602001600081525090565b6000819050919050565b61162381611610565b82525050565b600060208201905061163e600083018461161a565b92915050565b6000604051905090565b600080fd5b600080fd5b61166181611610565b811461166c57600080fd5b50565b60008135905061167e81611658565b92915050565b60006020828403121561169a5761169961164e565b5b60006116a88482850161166f565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156116eb5780820151818401526020810190506116d0565b60008484015250505050565b6000601f19601f8301169050919050565b6000611713826116b1565b61171d81856116bc565b935061172d8185602086016116cd565b611736816116f7565b840191505092915050565b61174a81611610565b82525050565b600060e083016000830151848203600086015261176d8282611708565b915050602083015184820360208601526117878282611708565b915050604083015184820360408601526117a18282611708565b915050606083015184820360608601526117bb8282611708565b915050608083015184820360808601526117d58282611708565b91505060a08301516117ea60a0860182611741565b5060c08301516117fd60c0860182611741565b508091505092915050565b600060208201905081810360008301526118228184611750565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61186c826116f7565b810181811067ffffffffffffffff8211171561188b5761188a611834565b5b80604052505050565b600061189e611644565b90506118aa8282611863565b919050565b600067ffffffffffffffff8211156118ca576118c9611834565b5b6118d3826116f7565b9050602081019050919050565b82818337600083830152505050565b60006119026118fd846118af565b611894565b90508281526020810184848401111561191e5761191d61182f565b5b6119298482856118e0565b509392505050565b600082601f8301126119465761194561182a565b5b81356119568482602086016118ef565b91505092915050565b6000819050919050565b6119728161195f565b811461197d57600080fd5b50565b60008135905061198f81611969565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006119c082611995565b9050919050565b6119d0816119b5565b81146119db57600080fd5b50565b6000813590506119ed816119c7565b92915050565b60008060008060008060008060006101208a8c031215611a1657611a1561164e565b5b60008a013567ffffffffffffffff811115611a3457611a33611653565b5b611a408c828d01611931565b99505060208a013567ffffffffffffffff811115611a6157611a60611653565b5b611a6d8c828d01611931565b98505060408a013567ffffffffffffffff811115611a8e57611a8d611653565b5b611a9a8c828d01611931565b97505060608a013567ffffffffffffffff811115611abb57611aba611653565b5b611ac78c828d01611931565b9650506080611ad88c828d0161166f565b95505060a08a013567ffffffffffffffff811115611af957611af8611653565b5b611b058c828d01611931565b94505060c0611b168c828d01611980565b93505060e0611b278c828d016119de565b925050610100611b398c828d016119de565b9150509295985092959850929598565b600082825260208201905092915050565b6000611b65826116b1565b611b6f8185611b49565b9350611b7f8185602086016116cd565b611b88816116f7565b840191505092915050565b600060e0820190508181036000830152611bad818a611b5a565b90508181036020830152611bc18189611b5a565b90508181036040830152611bd58188611b5a565b90508181036060830152611be98187611b5a565b90508181036080830152611bfd8186611b5a565b9050611c0c60a083018561161a565b611c1960c083018461161a565b98975050505050505050565b600060208284031215611c3b57611c3a61164e565b5b6000611c49848285016119de565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600060e0830160008301518482036000860152611c9b8282611708565b91505060208301518482036020860152611cb58282611708565b91505060408301518482036040860152611ccf8282611708565b91505060608301518482036060860152611ce98282611708565b91505060808301518482036080860152611d038282611708565b91505060a0830151611d1860a0860182611741565b5060c0830151611d2b60c0860182611741565b508091505092915050565b6000611d428383611c7e565b905092915050565b6000602082019050919050565b6000611d6282611c52565b611d6c8185611c5d565b935083602082028501611d7e85611c6e565b8060005b85811015611dba5784840389528151611d9b8582611d36565b9450611da683611d4a565b925060208a01995050600181019050611d82565b50829750879550505050505092915050565b60006020820190508181036000830152611de68184611d57565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611e6457607f821691505b602082108103611e7757611e76611e1d565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611eb782611610565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611ee957611ee8611e7d565b5b600182019050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302611f567fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611f19565b611f608683611f19565b95508019841693508086168417925050509392505050565b6000819050919050565b6000611f9d611f98611f9384611610565b611f78565b611610565b9050919050565b6000819050919050565b611fb783611f82565b611fcb611fc382611fa4565b848454611f26565b825550505050565b600090565b611fe0611fd3565b611feb818484611fae565b505050565b5b8181101561200f57612004600082611fd8565b600181019050611ff1565b5050565b601f8211156120545761202581611ef4565b61202e84611f09565b8101602085101561203d578190505b61205161204985611f09565b830182611ff0565b50505b505050565b600082821c905092915050565b600061207760001984600802612059565b1980831691505092915050565b60006120908383612066565b9150826002028217905092915050565b6120a9826116b1565b67ffffffffffffffff8111156120c2576120c1611834565b5b6120cc8254611e4c565b6120d7828285612013565b600060209050601f83116001811461210a57600084156120f8578287015190505b6121028582612084565b86555061216a565b601f19841661211886611ef4565b60005b828110156121405784890151825560018201915060208501945060208101905061211b565b8683101561215d5784890151612159601f891682612066565b8355505b6001600288020188555050505b505050505050565b600061217d8261195f565b91507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036121af576121ae611e7d565b5b600182019050919050565b60006121c582611610565b91506121d083611610565b92508282039050818111156121e8576121e7611e7d565b5b9291505056fea2646970667358221220f590ca3c452be1f63a874e1b2ef8134522476319f56a48430acd62d9f5ca6b5d64736f6c63430008160033";

    public static final String FUNC_CREATEPRODUCT = "createProduct";

    public static final String FUNC_FINDPRODUCT = "findProduct";

    public static final String FUNC_GETLASTINDEX = "getLastIndex";

    public static final String FUNC_GETLASTPRODUCTID = "getLastProductId";

    public static final String FUNC_GETPRODUCTDETAILS = "getProductDetails";

    public static final String FUNC_PRODUCTS = "products";

    public static final String FUNC_RUNNINGPRODUCTID = "runningProductId";

    @Deprecated
    protected GenContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected GenContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected GenContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected GenContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<TransactionReceipt> createProduct(String item_name, String mfg_date, String expiry_date, String batch_no, int i, String history, BigInteger bigInteger, String user_address, String to_Address) {
        final Function function = new Function(
                FUNC_CREATEPRODUCT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(item_name), 
                new org.web3j.abi.datatypes.Utf8String(mfg_date), 
                new org.web3j.abi.datatypes.Utf8String(expiry_date), 
                new org.web3j.abi.datatypes.Utf8String(batch_no), 
                new org.web3j.abi.datatypes.generated.Uint256(i), 
                new org.web3j.abi.datatypes.Utf8String(history), 
                new org.web3j.abi.datatypes.generated.Int256(bigInteger), 
                new org.web3j.abi.datatypes.Address(160, user_address), 
                new org.web3j.abi.datatypes.Address(160, to_Address)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List> findProduct(String person) {
        final Function function = new Function(FUNC_FINDPRODUCT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, person)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Product>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getLastIndex() {
        final Function function = new Function(FUNC_GETLASTINDEX, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getLastProductId(String addr) {
        final Function function = new Function(FUNC_GETLASTPRODUCTID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Product> getProductDetails(BigInteger productId) {
        final Function function = new Function(FUNC_GETPRODUCTDETAILS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(productId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Product>() {}));
        return executeRemoteCallSingleValueReturn(function, Product.class);
    }

    public RemoteFunctionCall<Tuple7<String, String, String, String, String, BigInteger, BigInteger>> products(BigInteger param0) {
        final Function function = new Function(FUNC_PRODUCTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple7<String, String, String, String, String, BigInteger, BigInteger>>(function,
                new Callable<Tuple7<String, String, String, String, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple7<String, String, String, String, String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<String, String, String, String, String, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> runningProductId() {
        final Function function = new Function(FUNC_RUNNINGPRODUCTID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    @Deprecated
    public static GenContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new GenContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static GenContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new GenContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static GenContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new GenContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static GenContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new GenContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<GenContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(GenContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<GenContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(GenContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<GenContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(GenContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<GenContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(GenContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class Product extends DynamicStruct {
        public String itemName;

        public String mfgDate;

        public String expiryDate;

        public String batchNo;

        public String current_history;

        public BigInteger ID;

        public BigInteger numberOfItem;

        public Product(String itemName, String mfgDate, String expiryDate, String batchNo, String current_history, BigInteger ID, BigInteger numberOfItem) {
            super(new org.web3j.abi.datatypes.Utf8String(itemName), 
                    new org.web3j.abi.datatypes.Utf8String(mfgDate), 
                    new org.web3j.abi.datatypes.Utf8String(expiryDate), 
                    new org.web3j.abi.datatypes.Utf8String(batchNo), 
                    new org.web3j.abi.datatypes.Utf8String(current_history), 
                    new org.web3j.abi.datatypes.generated.Uint256(ID), 
                    new org.web3j.abi.datatypes.generated.Uint256(numberOfItem));
            this.itemName = itemName;
            this.mfgDate = mfgDate;
            this.expiryDate = expiryDate;
            this.batchNo = batchNo;
            this.current_history = current_history;
            this.ID = ID;
            this.numberOfItem = numberOfItem;
        }

        public Product(Utf8String itemName, Utf8String mfgDate, Utf8String expiryDate, Utf8String batchNo, Utf8String current_history, Uint256 ID, Uint256 numberOfItem) {
            super(itemName, mfgDate, expiryDate, batchNo, current_history, ID, numberOfItem);
            this.itemName = itemName.getValue();
            this.mfgDate = mfgDate.getValue();
            this.expiryDate = expiryDate.getValue();
            this.batchNo = batchNo.getValue();
            this.current_history = current_history.getValue();
            this.ID = ID.getValue();
            this.numberOfItem = numberOfItem.getValue();
        }
    }

    // public RemoteCall<BigInteger> createProduct(String itemName, String mfgDate, String expiryDate, String batchNo,
    //         int numOfItem, String history, int parent, String userAddress, String toAddress) {
    //     // TODO Auto-generated method stub
    //     throw new UnsupportedOperationException("Unimplemented method 'createProduct'");
    // }
}
